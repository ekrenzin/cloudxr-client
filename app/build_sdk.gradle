def OVR_SDK_ROOT = file("${buildDir}/ovr_sdk")
def OBOE_SDK_ROOT = file("${buildDir}/Oboe")
def CLOUDXR_SDK_ROOT = file("${buildDir}/CloudXR")
def C_SHARED_INCLUDE = file("${project.rootDir}/../../shared")

android {
    defaultConfig {
        externalNativeBuild { ndkBuild {
            arguments "OVR_SDK_ROOT=${OVR_SDK_ROOT}"
            arguments "OBOE_SDK_ROOT=${OBOE_SDK_ROOT}"
            arguments "CLOUDXR_SDK_ROOT=${CLOUDXR_SDK_ROOT}"
            arguments "C_SHARED_INCLUDE=${C_SHARED_INCLUDE}"
            arguments '-j4'
        }}
        ndk {
            abiFilters 'arm64-v8a'
        }
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }

    buildTypes {
        release {
            externalNativeBuild { ndkBuild {
                arguments "NDK_DEBUG=0"
            }}
        }
        debug {
            externalNativeBuild { ndkBuild {
                arguments "NDK_DEBUG=1"
            }}
        }
    }
}

repositories {
    flatDir{
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.nvidia.CloudXRClient:CloudXR@aar"
}


// Extract the Oculus VR SDK
tasks.register('extractOVRSDK', Copy) {
    def sourceFile = file("${projectDir}/libs/ovr_sdk.zip")
    from zipTree(sourceFile)
    into OVR_SDK_ROOT
}

// Extract the Oboe SDK
tasks.register('extractOboeSDK', Copy) {
    def sourceFile = file("${projectDir}/libs/oboe.aar")
    from zipTree(sourceFile)
    into OBOE_SDK_ROOT
}

// Extract the CloudXR SDK
tasks.register('extractCloudXRSDK', Copy) {
    def sourceFile = file("${projectDir}/libs/CloudXR.aar")
    from zipTree(sourceFile)
    into CLOUDXR_SDK_ROOT
}

preBuild.dependsOn(extractOVRSDK)
preBuild.dependsOn(extractOboeSDK)
preBuild.dependsOn(extractCloudXRSDK)
